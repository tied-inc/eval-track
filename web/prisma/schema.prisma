// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model Application {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  name        String
  description String
  url         String
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // userId String @map("user_id")
  // user   User   @relation(fields: [userId], references: [id])

  ApplicationTrace       ApplicationTrace[]
  ApplicationTrackingKey ApplicationTrackingKey[]

  @@map("applications")
}

model ApplicationTrackingKey {
  key String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // userId String @map("user_id")
  // user   User   @relation(fields: [userId], references: [id])

  applicationId String      @map("application_id") @db.Uuid
  application   Application @relation(fields: [applicationId], references: [id])

  @@map("application_tracking_keys")
}

model Trace {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  ApplicationTrace ApplicationTrace[]
  Artifact         Artifact[]

  @@map("traces")
}

model ArtifactStore {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  name      String
  endpoint  String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  Artifact Artifact[]

  @@map("artifact_stores")
}

model Artifact {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  uri String

  artifactStoreId String        @map("artifact_store_id") @db.Uuid
  ArtifactStore   ArtifactStore @relation(fields: [artifactStoreId], references: [id])
  traceId         String        @db.Uuid
  Trace           Trace         @relation(fields: [traceId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("artifacts")
}

model ApplicationTrace {
  applicationId String   @map("application_id") @db.Uuid
  traceId       String   @map("trace_id") @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  Application Application @relation(fields: [applicationId], references: [id])
  Trace       Trace       @relation(fields: [traceId], references: [id])

  @@unique([applicationId, traceId], name: "application_traces_application_id_trace_id_unique")
  @@index([applicationId], name: "application_traces_application_id_index")
  @@index([traceId], name: "application_traces_trace_id_index")
  @@map("application_traces")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  // Application            Application[]
  // ApplicationTrackingKey ApplicationTrackingKey[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
