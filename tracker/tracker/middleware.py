import logging
import time
from typing import Awaitable, Callable

from fastapi import Request, Response

from tracker.settings import settings

logger = logging.getLogger(__name__)


async def secret_key_middleware(request: Request, call_next: Callable[[Request], Awaitable[Response]]) -> Response:
    """Middleware that adds the secret key to the request headers.

    This middleware is responsible for adding the secret key to the request headers
    before passing the request to the next middleware in the chain. The secret key is
    retrieved from the settings object.

    Args:
        request (Request): The incoming request object.
        call_next (Callable[[Request], Awaitable[Response]]): The next middleware in the chain.

    Returns:
        Response: The response object returned by the next middleware in the chain.
    """
    header_key = request.headers.get("x-eval-tracker-secret-key")

    if settings.eval_tracker_secret_key and header_key != settings.eval_tracker_secret_key:
        logging.error("Invalid secret key")
        return Response(content="Invalid secret key", status_code=403)

    response = await call_next(request)

    return response


async def api_access_log_middleware(request: Request, call_next: Callable[[Request], Awaitable[Response]]) -> Response:
    """
    Middleware to log details of incoming HTTP requests and their responses.
    Args:
        request (Request): The incoming HTTP request.
        call_next (Callable[[Request], Awaitable[Response]]): The next middleware or route handler to be called.
    Returns:
        Response: The HTTP response generated by the next middleware or route handler.
    Logs:
        - When a request is received, logs the HTTP method, path, and query parameters.
        - If the client disconnects before the response is sent, logs a disconnection message.
        - When a request is processed, logs the HTTP method, path, query parameters,
            status code, and elapsed time in seconds.
    """
    start_time = time.perf_counter()
    logger.info(
        "Request received",
        extra={
            "method": request.method,
            "path": request.url.path,
            "query": request.query_params,
        },
    )
    response = await call_next(request)
    if await request.is_disconnected():
        logger.info("Client disconnected before sending the response.")

    elapsed_time = time.perf_counter() - start_time
    logger.info(
        "Request processed",
        extra={
            "method": request.method,
            "path": request.url.path,
            "query": request.query_params,
            "status_code": response.status_code,
            "elapsed_time_sec": round(elapsed_time, 3),
        },
    )
    return response
