name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tracker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Setup uv
        run: |
          task setup-uv

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.uv/cache
          key: ${{ runner.os }}-uv-${{ hashFiles('tracker/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Setup virtual environment and install package
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          uv venv
          source .venv/bin/activate
          # Install the package first in editable mode
          pip install -e .
          # Then install dependencies
          task install-tracker
          uv pip install pytest-asyncio
          # Verify package installation
          python -c "from tracker.logging_config import setup_logging; print('Package imported successfully')"

      - name: Start localstack
        run: |
          echo "Pulling LocalStack image..."
          docker pull localstack/localstack:latest
          
          echo "Starting LocalStack container..."
          docker run -d --name localstack -p 4566:4566 \
            -e SERVICES=s3 \
            -e DEFAULT_REGION=us-east-1 \
            -e AWS_ACCESS_KEY_ID=test \
            -e AWS_SECRET_ACCESS_KEY=test \
            -e DEBUG=1 \
            -e EAGER_SERVICE_LOADING=1 \
            -v "/var/run/docker.sock:/var/run/docker.sock" \
            localstack/localstack:latest
          
          echo "Waiting for LocalStack to be ready..."
          max_attempts=40
          for i in $(seq 1 $max_attempts); do
            echo "Attempt $i/$max_attempts: Checking LocalStack status..."
            
            # Check container status
            container_status=$(docker inspect -f '{{.State.Status}}' localstack)
            echo "Container status: $container_status"
            if [ "$container_status" != "running" ]; then
              echo "Container is not running! Status: $container_status"
              docker logs localstack
              exit 1
            fi
            
            # Check service health
            echo "Checking service health..."
            health=$(curl -s http://localhost:4566/_localstack/health || echo "Connection failed")
            echo "Health response: $health"
            
            if echo "$health" | grep -q "\"s3\": \"running\""; then
              echo "LocalStack S3 service is ready!"
              
              # Verify S3 endpoint is responding
              echo "Verifying S3 endpoint..."
              aws_response=$(curl -s -f http://localhost:4566/health || echo "S3 endpoint check failed")
              echo "S3 endpoint response: $aws_response"
              
              if [ $? -eq 0 ]; then
                echo "LocalStack initialization complete!"
                exit 0
              fi
            fi
            
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done
          
          echo "LocalStack failed to start within $(($max_attempts * 5)) seconds"
          echo "Container logs:"
          docker logs localstack
          echo "Container status:"
          docker inspect localstack
          exit 1

      - name: Run code quality checks
        run: |
          task check-all-tracker
          if [ $? -ne 0 ]; then
            echo "Code quality checks failed"
            exit 1
          fi

      - name: Run tests with coverage
        run: |
          echo "Python path: $PYTHONPATH"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -R
          echo "Installed packages:"
          pip list
          echo "Running tests..."
          PYTHONPATH=$PYTHONPATH:$(pwd) task test-tracker
          if [ $? -ne 0 ]; then
            echo "Tests failed"
            exit 1
          fi
          echo "Running coverage..."
          PYTHONPATH=$PYTHONPATH:$(pwd) task coverage-tracker
          if [ $? -ne 0 ]; then
            echo "Coverage checks failed"
            exit 1
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            tracker/htmlcov
            tracker/.coverage
